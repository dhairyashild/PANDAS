#################################################################
sagar-video-1-notes

df= pd.read_csv("data.csv")  / df=pd.DataFrame(data)    -for local data to add

df.info()
df.head()            
df.tail()
df[["salary","age"]]        /   df["salary"]
df.describe()

2nd vid
df.insert( v1,"v2",[v3])         v/s   df,drop(columns=["v2"]) 
df.isnull()
df.isnull().sum()
df.dropna(axis=0, inplace=True)            ax=1 for column
df.fillna(value-to-fill , inplace=True)
##################################################################

df.insert(column-number-from0,"new-column-title",[new-column-data])            df.drop(columns=["    ","    "],inplace=true)
df.loc[2, "salary"]= 5500                           ##only this have square bracket 1st other all strart with  round bracket
df.drop(columns=["column-nav"])

1) check where are null values ?
print(df.isnull())          -----show all missing values in full dataframe    --here false= no worry
print(df.isnull().sum())    ----- get only number on null values in each column

2) remove null values
NULL ROW REMOVE------- df.dropna(axis=0, inplace=True)
NULL COLOMN REMOVE --- df.dropna(axis=1, inplace=False)

3) fill null values by same value everywhere
df.fillna(value-to-fill , inplace=True)












1  ####insert new column in code                                                                                     
df.insert(column-number-from0,"new-column-title",[new-column-data])
df.insert(2,"extra-paisa",[1000,2000,3000,4000])

4  Remove any column
df.drop(columns=["column-nav"])
df.drop(columns=["loser"])   

2  #### replace any value
df.loc[row-number-from0, "column-name-title"]= 5500                                 ####loc=location  [row-number,"column-name-title"]
df.loc[2, "salary"]= 5500      

3 increase any column by 5%=  *1.05 or reduce by 10%=  *.9 (add multiply as per need)
df("salary") = df("salary") *1.05

                    




1  ####insert new column in code



df["bonus"]= df["salary]*0.1  ###directly add column as last column

####insert new column in code
#df.insert(colun-number , "column-title", [data1,2,3,4,5])
print( df.insert(2,"extra-paisa",[1000,2000,3000,4000]) )
print(df)

None
  name  salary  extra-paisa  bonus  age  winner  loser
0   dd    1000         1000   1000   20    True  False
1   dd    2000         2000   2000   30   False   True
2   pp    3000         3000   3000   40    True  False
3   sd    4000         4000   4000   50   False   True



2#### replace any value

df.loc[2, "salary"]= 5500         ##loc=location  [row-number,"column-name-title"]= value u want replace there so above pp salary replace by 5500

name  salary  extra-paisa  bonus  age  winner  loser
0   dd    1000         1000   1000   20    True  False
1   dd    2000         2000   2000   30   False   True
2   pp    5500         3000   3000   40    True  False
3   sd    4000         4000   4000   50   False   True





3 increase any column by 5%=  *1.05 or reduce by 10%=  *.9 (add multiply as per need)
df("salary") = df("salary") *1.05


##### 16min nanatr

5   MISSING VALUES


NaN = Not a number
None = for object data types) 

isnull()  
True =Nan means data  missing 
False =value is present -- no need to do anything

1) check where are null values ?
print(df.isnull())         ---------show all missing values in full dataframe    --here false= no worry
print(df.isnull().sum())    ----- get only number on null values in each column

2) remove null values
NULL ROW REMOVE------- df.dropna(axis=0, inplace=True)
NULL COLOMN REMOVE --- df.dropna(axis=1, inplace=False)

3) fill null values by same value everywhere
df.fillna(value-to-fill , inplace=True)

4) fill null values by mean value everywhere
df["age"].fillna(df["age"].mean(),inplace=True)
df["age"].fillna()               ----select age column for fillna
df["age"].mean()                 ----mean 





5) Interpolate====   गहाळ मूल्ये (missing values) अंदाजित करून भरणे.

प्रकार : these 3 imp learn these 3 must...
linear: सरळ रेषेत मूल्य भरणे.
polynomial: बहुपदीय समीकरणाने भरणे.
time: वेळेनुसार डेटा असल्यास वापर.

कोड उदाहरण: linear
import pandas as pd
s = pd.Series([1, None, 3])
s_filled = s.interpolate()
print(s_filled)
# Output:
# 0    1.0
# 1    2.0
# 2    3.0
# dtype: float64

USE--
numerical data predict value

disadv--
names/ ids  cant use to predict
--------------------------------------
sort_values() -

व्याख्या: डेटाफ्रेम किंवा सिरीजमधील मूल्यांना क्रमवार लावणे.

पॅरामीटर्स:
by: (DataFrame) सॉर्ट करण्यासाठी स्तंभांची नावे.
ascending: चढत्या (True) किंवा उतरत्या (False) क्रमाने.
inplace: मूळ डेटा बदलायचा की नाही.
उदाहरण :

import pandas as pd
data = {'A': [3, 1, 2], 'B': [6, 4, 5]}
df = pd.DataFrame(data)
df_sorted = df.sort_values(by='A',ascending=True, inplace=true)
print(df_sorted)
# Output:
#    A  B
# 1  1  4
# 2  2  5
# 0  3  6

------------------------------
summery statistics===

df.Column Name.sum()
df.Column Name.min()
df.column Name.max()

--------------------------------------

42


