import pandas as pd

1. Load Data
df= pd.read_csv("data.csv")  / df=pd.DataFrame(data)

2. Inspect Basic Info
df.info()   ======Data types, non-null counts

3. Preview Data
df.head()    ====== Sample first         
df.tail()   ======Sample last

4. Select Relevant Columns
df[["salary","age"]]   ======Check features/target needed for modeling

5. Statistical Summary
df.describe()   ======mean, std, quartiles) for numeric columns to detect outliers and distribution

#######################################################################################

1 Allow panda to to  read which is already given in csv/json/excel
df= pd.read_csv("data.csv")
df=pd.read_excel("data.xlsx")
df=pd.read_json("data.json")

#### ENCODING ERROR CAME FOR ABOVE COMMAND THEN
# Use UTF-8 for most files (handles multilingual, safest default)
df = pd.read_csv('file.csv', encoding='utf-8')
# Use latin1 for legacy/European/Excel files or if utf-8 gives errors
df = pd.read_csv('file.csv', encoding='latin1')

                               OR
1" IF U WRITE DATA BY URSELF EACH ROW AND & COLOMN
data= {                                           #     data=  {curly}             "name"          :CORRECT/=WRONG HERE     [list ,]
"name" : ["dd", "dd","pp","sd"],
"salary" : [1000, 2000, 3000, 4000],
"age" : [20, 30, 40, 50]
}

df=pd.DataFrame(data)                       # DF mothe shabd                  data=  {curly}                        "name" : vapara = nahi  [list ,]
df.to_csv("output.csv",index=false)         # .to_csv("") --converts manually created data into csv files      
                                            # index = Not to include row index, default True   
df.to_json('output.json', index=False)
df.to_excel('output.xlsx', index=False)  # index=False to exclude row index


2  ----select 2 columns  
 print(df[["salary","age"]])              #  [  [  2 square ]  ]      
   ----create subset of above 2 columns
     subset1= df.[["salary" , "age" ]]


3 print(df.info())                          # df.info()
RangeIndex: 4  rows
Data columns (total 5 columns
memory

4 print(df.head())  /   print(df.tail())          # df.head()            df.tail()

5  print(df.describe())
salary        age
count     4.000000   4.000000                   ## count ===non null values
mean   2500.000000  35.000000
std    1290.994449  12.909944
min    1000.000000  20.000000
25%    1750.000000  27.500000                   # 1st 25% values average if put in ascending oredr only (not consider descending)
50%    2500.000000  35.000000                   # 2nd 
75%    3250.000000  42.500000
max    4000.000000  50.000000


6  coditions
print((df["age"]>40) & (df["age"]>40))                  ----- 2 condition

print((df["age"]>40) | (df["age"]>40))                  ----- 1st or 2 nd condition must satisfy by data
















import pandas as pd

data= {                                                                      #     data=  {curly}                        "name" : vapara = nahi  [list ,]
"name" : ["dd", "dd","pp","sd"],
"salary" : [1000, 2000, 3000, 4000],
"age" : [20, 30, 40, 50]
}

df=pd.DataFrame(data)
print(df)

print(df[["salary","age"]])

print(df.head())                                                    #df.head()

print(df.tail(2))

print(df.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4 entries, 0 to 3
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   name    4 non-null      object
 1   salary  4 non-null      int64 
 2   age     4 non-null      int64 
 3   winner  4 non-null      bool  
 4   loser   4 non-null      bool  
dtypes: bool(2), int64(2), object(1)
memory usage: 232.0+ bytes
None


RangeIndex: 4  rows
Data columns (total 5 columns



















